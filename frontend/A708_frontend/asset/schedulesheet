class SchedulBottomSheet extends StatefulWidget {
  final DateTime selectedDate;
  final int? scheduleId;
  final int? homeId;
  final int? scheduleTime;
  final String? content;
  final String? startDate;
  final String? endDate;
  const SchedulBottomSheet(
      {required this.selectedDate,
      this.scheduleId,
      required this.homeId,
      required this.scheduleTime,
      required this.content,
      required this.startDate,
      required this.endDate,
      Key? key})
      : super(key: key);

  @override
  State<SchedulBottomSheet> createState() => _SchedulBottomSheetState();
}

class _SchedulBottomSheetState extends State<SchedulBottomSheet> {
  final GlobalKey<FormState> formKey = GlobalKey();
  DateTime? startTime;
  DateTime? endTime;
  String? content;
  int? selectedColorId;
  String? yearMonthDayTime;
  @override
  Widget build(BuildContext context) {
    final bottomInset = MediaQuery.of(context).viewInsets.bottom;
    return GestureDetector(
        onTap: () {
          FocusScope.of(context).requestFocus(FocusNode());
        },
        child: SafeArea(
          child: Container(
            color: Colors.white,
            height: MediaQuery.of(context).size.height / 2 + bottomInset,
            child: Padding(
              padding: EdgeInsets.only(bottom: bottomInset),
              child: Padding(
                padding: EdgeInsets.only(left: 8.0, right: 8.0, top: 16.0),
                child: Form(
                  key: formKey,
                  // autovalidateMode: AutovalidateMode.always,
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      SizedBox(
                          height: 80,
                          child: CustomTextField(
                              initialValue: '',
                              onSaved: (String? val) {
                                yearMonthDayTime = val;
                              },
                              label: '1234',
                              isTime: false)
                          // _Time(
                          //   onStartSaved: (String? val) {
                          //     startTime = DateTime.parse(val!);
                          //   },
                          //   onEndSaved: (String? val) {
                          //     endTime = DateTime.parse(val!);
                          //     // endTime = int.parse(val!);
                          //   },
                          //   startInitialValue: DateTime(
                          //     DateTime.now().year,
                          //     DateTime.now().month,
                          //     DateTime.now().day,
                          //   ),
                          //   endInitialValue: DateTime.now(),
                          //   // endInitialValue: endTime?.toString() ?? '',
                          // ),
                          ),
                      SizedBox(height: 16.0),
                      Text('시간 선택'),
                      _content(
                        onSaved: (String? val) {
                          content = val;
                        },
                        initialValue: content ?? '',
                      ),
                      // SizedBox(height: 16.0),

                      SizedBox(height: 8.0),
                      _SaveButton(
                        onPressed: onSavePressed,
                      ),
                    ],
                  ),
                ),
              ),
            ),
          ),
        ));
  }

  void onSavePressed() async {
    // formKey는 생성을 했는데
    // Form 위젯과 결합을 안했을 때 (여기선 일어나지 않음)
    if (formKey.currentState == null) {
      return;
    }
    //모든 state를 다  동시에 validate  진행한다.
    if (formKey.currentState!.validate()) {
      formKey.currentState!.save();
      if (widget.scheduleId == null) {
        await GetIt.I<LocalDatabase>().createSchedule(
          SchedulesCompanion(
            date: Value(widget.selectedDate),
            startTime: Value(startTime!),
            endTime: Value(endTime!),
            content: Value(content!),
            colorId: Value(selectedColorId!),
          ),
        );
      } else {
        await GetIt.I<LocalDatabase>().updateScheduleById(
            widget.scheduleId!,
            SchedulesCompanion(
              date: Value(widget.selectedDate),
              startTime: Value(startTime!),
              endTime: Value(endTime!),
              content: Value(content!),
              colorId: Value(selectedColorId!),
            ));
      }

      Navigator.of(context).pop();
    }

    // 하나라도 에러가 있으면
    else {
      print('에러가 있습니다.');
    }
  }
}

class _Time extends StatelessWidget {
  final FormFieldSetter<String> onStartSaved;
  final FormFieldSetter<String> onEndSaved;
  final DateTime startInitialValue;
  final DateTime endInitialValue;
  const _Time(
      {required this.endInitialValue,
      required this.startInitialValue,
      required this.onEndSaved,
      required this.onStartSaved,
      Key? key})
      : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Row(
      children: [
        Expanded(
            child: CustomTextField(
          onSaved: onStartSaved,
          initialValue: DateFormat('yyyy.MM.dd').format(startInitialValue),
          label: '시작일',
          isTime: true,
        )),
        SizedBox(
          width: 16.0,
        ),
        Expanded(
            child: CustomTextField(
          initialValue: DateFormat('yyyy.MM.dd').format(endInitialValue),
          onSaved: onEndSaved,
          label: '종료일',
          isTime: true,
        ))
      ],
    );
  }
}

class _content extends StatelessWidget {
  final FormFieldSetter<String> onSaved;
  final String initialValue;
  const _content({required this.initialValue, required this.onSaved, Key? key})
      : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Expanded(
      child: CustomTextField(
        initialValue: initialValue,
        onSaved: onSaved,
        label: '내용',
        isTime: false,
      ),
    );
  }
}

class _SaveButton extends StatelessWidget {
  final VoidCallback onPressed;
  const _SaveButton({required this.onPressed, Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Row(
      children: [
        Expanded(
            child: ElevatedButton(
                onPressed: onPressed,
                style: ElevatedButton.styleFrom(primary: Colors.blue),
                child: Text('저장'))),
      ],
    );
  }
  String? yearMonthDayTime;
  TextEditingController ymdtController = TextEditingController();
  yearMonthDayTimePicker() async {
    final year = DateTime.now().year;
    String hour, min;
    final DateTime? dateTime = await showDatePicker(
      context: context,
      initialDate: DateTime.now(),
      firstDate: DateTime(year),
      lastDate: DateTime(year + 10),
    );

    if (dateTime != null) {
      final TimeOfDay? pickedTime = await showTimePicker(
        context: context,
        initialTime: TimeOfDay(hour: 0, minute: 0),
      );

      if (pickedTime != null) {
        if (pickedTime.hour < 10) {
          hour = '0' + pickedTime.hour.toString();
        } else {
          hour = pickedTime.hour.toString();
        }

        if (pickedTime.minute < 10) {
          min = '0' + pickedTime.minute.toString();
        } else {
          min = pickedTime.minute.toString();
        }

        ymdtController.text = '${dateTime.toString().split(' ')[0]} $hour:$min';
      }
    }
  }
}

